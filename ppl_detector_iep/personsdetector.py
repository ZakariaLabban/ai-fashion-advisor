# NOTE: This original implementation is for reference only.
# The functionality has been properly integrated into main.py for use as an IEP.
# This file can be used for development/testing outside the Docker container.

# -*- coding: utf-8 -*-
"""personsdetector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wkHnqVCsnHjmhXJk9wXUXS0JvBhJQRna
"""

# Install dependencies (in Colab)
# pip install -q ultralytics matplotlib

# Imports
from ultralytics import YOLO
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
from PIL import Image

# 1. Ensure your detection model is already in the Colab filesystem
#    (e.g., you previously uploaded yolov8n.pt into the root directory)
import os
model_path = next((f for f in os.listdir('.') if f.endswith('.pt')), None)
if model_path is None:
    raise FileNotFoundError("No .pt model file found in the working directory.")
print(f"Using model: {model_path}")

# 2. Load the YOLOv8 model
model = YOLO(model_path)
print("Loaded YOLOv8 model.")

# 3. Prompt to upload exactly one image file for testing
print("Please upload one image (JPG/PNG) to test person detection.")
uploaded = files.upload()
image_file = next((f for f in uploaded.keys() if f.lower().endswith(('.jpg','.jpeg','.png'))), None)
if image_file is None:
    raise ValueError("No image file uploaded. Please upload a .jpg or .png image.")
print(f"Uploaded image: {image_file}")

# 4. Run inference on the uploaded image
results = model(image_file)      # returns a Results object
res = results[0]                 # first (and only) image in this batch

# 5. Count detected persons (COCO class 0 = person)
classes = res.boxes.cls.cpu().numpy().astype(int)
person_count = int((classes == 0).sum())
print(f"Persons detected: {person_count}")

# 6. Visualize detections
annotated = res.plot()  # returns a numpy array with boxes & labels drawn
plt.figure(figsize=(8,8))
plt.axis('off')
plt.imshow(annotated)
plt.title(f"Detected {person_count} person(s)")
plt.show()

