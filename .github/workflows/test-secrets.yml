name: Test GitHub Secrets

on:
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-secrets:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Debug environment
      run: |
        echo "Shell being used: $SHELL"
        echo "Current working directory: $(pwd)"
        echo "Directory contents: $(ls -la)"
      
    - name: Verify secrets are available
      run: |
        # This step just verifies if all secrets are set
        # It doesn't print them to avoid security issues
        
        # List of required secrets
        REQUIRED_SECRETS=(
          "FASHN_AI_API_KEY"
          "FASHN_AI_BASE_URL"
          "OPENAI_API_KEY"
          "QDRANT_URL"
          "QDRANT_API_KEY"
          "COLLECTION_NAME"
          "GOOGLE_FOLDER_ID"
          "MYSQL_HOST"
          "MYSQL_PORT"
          "MYSQL_USER"
          "MYSQL_PASSWORD"
          "MYSQL_DATABASE"
          "SEGMENTED_FOLDER_ID"
          "FULL_FOLDER_ID"
          "SERVICE_ACCOUNT_FILE_CONTENT"
          "MYSQL_SSL_CA_CONTENT"
        )
        
        # Check if secrets are set
        MISSING_SECRETS=()
        for secret in "${REQUIRED_SECRETS[@]}"; do
          # Use a different approach to check if secrets exist
          # This avoids errors with indirect variable references
          SECRET_VALUE="secrets.$secret"
          if [ -z "$(eval echo \${!SECRET_VALUE})" ]; then
            MISSING_SECRETS+=("$secret")
          else
            echo "✅ $secret is set"
          fi
        done
        
        # Report missing secrets
        if [ ${#MISSING_SECRETS[@]} -ne 0 ]; then
          echo "⚠️ Missing secrets: ${MISSING_SECRETS[*]}"
          exit 1
        else
          echo "All required secrets are set! ✅"
        fi
    
    - name: Test base64 decoding
      run: |
        # Test if base64 decoding works correctly
        echo "Testing base64 decoding..."
        echo "SGVsbG8gV29ybGQ=" | base64 -d
        
        # Check which base64 is available
        which base64
        base64 --version || echo "base64 version command not supported"
        
    - name: Create files from secrets
      run: |
        # Create directories if they don't exist
        mkdir -p reco_data_iep
        mkdir -p text2image_iep
        
        echo "Directory structure:"
        ls -la
        
        # Create service account files - use echo to pipe into base64 -d
        echo "Creating service account files..."
        # Test with a small sample first
        echo "Length of SERVICE_ACCOUNT_FILE_CONTENT: ${#SERVICE_ACCOUNT_FILE_CONTENT}"
        echo "First 10 chars: ${SERVICE_ACCOUNT_FILE_CONTENT:0:10}..."
        
        # Try with explicit command path
        echo "${{ secrets.SERVICE_ACCOUNT_FILE_CONTENT }}" | /usr/bin/base64 -d > reco_data_iep/auradataset-a28919b443a7.json || { echo "Error decoding service account"; exit 1; }
        echo "${{ secrets.SERVICE_ACCOUNT_FILE_CONTENT }}" | /usr/bin/base64 -d > text2image_iep/auradataset-a28919b443a7.json || { echo "Error decoding service account"; exit 1; }
        
        # Create MySQL CA cert with explicit command path
        echo "Creating MySQL CA certificate..."
        echo "${{ secrets.MYSQL_SSL_CA_CONTENT }}" | /usr/bin/base64 -d > reco_data_iep/ca.pem || { echo "Error decoding CA cert"; exit 1; }
        
        # Verify files were created with sizes
        echo "Checking files..."
        if [ -f "reco_data_iep/auradataset-a28919b443a7.json" ] && 
           [ -f "text2image_iep/auradataset-a28919b443a7.json" ] && 
           [ -f "reco_data_iep/ca.pem" ]; then
          echo "✅ Files created successfully!"
          ls -la reco_data_iep/
          ls -la text2image_iep/
          
          # Check first few lines of files (without revealing private info)
          echo "Service account JSON first 2 lines:"
          head -n 2 reco_data_iep/auradataset-a28919b443a7.json
          
          echo "CA certificate file info:"
          file reco_data_iep/ca.pem
        else
          echo "❌ Failed to create required files!"
          echo "Missing files:"
          [ ! -f "reco_data_iep/auradataset-a28919b443a7.json" ] && echo "- reco_data_iep/auradataset-a28919b443a7.json"
          [ ! -f "text2image_iep/auradataset-a28919b443a7.json" ] && echo "- text2image_iep/auradataset-a28919b443a7.json"
          [ ! -f "reco_data_iep/ca.pem" ] && echo "- reco_data_iep/ca.pem"
          exit 1
        fi
        
        # Create a test .env file
        echo "Creating test .env file..."
        echo "# Environment file generated from GitHub Secrets" > .env
        echo "MYSQL_SSL_CA=/app/ca.pem" >> .env
        echo "SERVICE_ACCOUNT_FILE=/app/auradataset-a28919b443a7.json" >> .env
        cat .env
        echo "✅ Environment file created successfully!" 