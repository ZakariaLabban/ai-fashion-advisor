name: Test GitHub Secrets

on:
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-secrets:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Verify secrets are available
      run: |
        # This step just verifies if all secrets are set
        # It doesn't print them to avoid security issues
        
        # List of required secrets
        REQUIRED_SECRETS=(
          "FASHN_AI_API_KEY"
          "FASHN_AI_BASE_URL"
          "OPENAI_API_KEY"
          "QDRANT_URL"
          "QDRANT_API_KEY"
          "COLLECTION_NAME"
          "GOOGLE_FOLDER_ID"
          "MYSQL_HOST"
          "MYSQL_PORT"
          "MYSQL_USER"
          "MYSQL_PASSWORD"
          "MYSQL_DATABASE"
          "SEGMENTED_FOLDER_ID"
          "FULL_FOLDER_ID"
          "SERVICE_ACCOUNT_FILE_CONTENT"
          "MYSQL_SSL_CA_CONTENT"
        )
        
        # Check if secrets are set
        MISSING_SECRETS=()
        for secret in "${REQUIRED_SECRETS[@]}"; do
          # Use a bash trick to check if the variable is set
          # Indirectly refer to secrets using github context
          # This avoids printing the secret value
          if [ -z "$(eval echo \${{ secrets.$secret }})" ]; then
            MISSING_SECRETS+=("$secret")
          else
            echo "✅ $secret is set"
          fi
        done
        
        # Report missing secrets
        if [ ${#MISSING_SECRETS[@]} -ne 0 ]; then
          echo "⚠️ Missing secrets: ${MISSING_SECRETS[*]}"
          exit 1
        else
          echo "All required secrets are set! ✅"
        fi
    
    - name: Create files from secrets
      run: |
        # Create directories if they don't exist
        mkdir -p reco_data_iep
        mkdir -p text2image_iep
        
        # Create service account files
        echo "Creating service account files..."
        echo "${{ secrets.SERVICE_ACCOUNT_FILE_CONTENT }}" | base64 -d > reco_data_iep/auradataset-a28919b443a7.json
        echo "${{ secrets.SERVICE_ACCOUNT_FILE_CONTENT }}" | base64 -d > text2image_iep/auradataset-a28919b443a7.json
        
        # Create MySQL CA cert
        echo "Creating MySQL CA certificate..."
        echo "${{ secrets.MYSQL_SSL_CA_CONTENT }}" | base64 -d > reco_data_iep/ca.pem
        
        # Verify files were created
        echo "Checking files..."
        if [ -f "reco_data_iep/auradataset-a28919b443a7.json" ] && 
           [ -f "text2image_iep/auradataset-a28919b443a7.json" ] && 
           [ -f "reco_data_iep/ca.pem" ]; then
          echo "✅ Files created successfully!"
          ls -la reco_data_iep/
          ls -la text2image_iep/
        else
          echo "❌ Failed to create required files!"
          exit 1
        fi
        
        # Create a test .env file
        echo "Creating test .env file..."
        echo "# Environment file generated from GitHub Secrets" > .env
        echo "MYSQL_SSL_CA=/app/ca.pem" >> .env
        echo "SERVICE_ACCOUNT_FILE=/app/auradataset-a28919b443a7.json" >> .env
        cat .env
        echo "✅ Environment file created successfully!" 